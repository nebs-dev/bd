<?php

namespace AppBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * UnitRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UnitRepository extends EntityRepository {

    /**
     * Get all units
     * @return array
     */
    public function getAll() {
        $qb = $this->createQueryBuilder('u')
            ->select('u, a, ud, up')
            ->innerJoin('u.accommodation', 'a')
            ->leftJoin('u.details', 'ud')
            ->leftJoin('u.periods', 'up');

        return $qb->getQuery()->getResult();
    }

    /**
     * Get hosts units
     * @param $host
     * @return array
     */
    public function getUnitsHost($host) {
        $qb = $this->createQueryBuilder('u')
            ->select('u')
            ->innerJoin('u.accommodation', 'a')
            ->where('a.user = :host')
            ->setParameter('host', $host);

        return $qb->getQuery()->getResult();
    }

    /**
     * Get units for accommodation by ID
     * @param $accommodationId
     * @return array
     */
    public function getUnitsAccommodation($accommodationId) {
        $qb = $this->createQueryBuilder('u')
            ->select('u, a, ud, up')
            ->innerJoin('u.accommodation', 'a')
            ->leftJoin('u.details', 'ud')
	        ->leftJoin('u.periods', 'up')
            ->where('u.accommodation = :accommodationId')
            ->setParameter('accommodationId', $accommodationId);

        return $qb->getQuery()->getResult();
    }


    /**
     * Get lowest Unit basicPrice for Accommodation
     * @param $accommodation
     * @return int
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getLowPrice($accommodation) {
        $query = $this->createQueryBuilder('u');
        $query->select('MIN(u.basicPrice) AS lowPrice');
        $query->where('u.accommodation = :accommodation')->setParameter('accommodation', $accommodation);
        $query->orderBy('lowPrice', 'DESC');

        return (count($query->getQuery()->getSingleResult() > 0)) ? $query->getQuery()->getSingleResult()['lowPrice'] : 0;
    }

    /**
     * @param $host
     * @return mixed
     */
    public function getUnitNumHost($host) {
        $qb = $this->createQueryBuilder('u')
            ->select('count(u)')
            ->innerJoin('u.accommodation', 'a')
            ->where('a.user = :host')
            ->setParameter('host', $host);

        return $qb->getQuery()->getSingleScalarResult();
    }

}
