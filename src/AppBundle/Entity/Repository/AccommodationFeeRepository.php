<?php

namespace AppBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * AccommodationFeeRepository
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AccommodationFeeRepository extends EntityRepository {

    /**
     * Change status to all fees
     * @param $tip
     */
    public function changeStatus($accommodation, $status) {
        $qb = $this->createQueryBuilder('f')
            ->update('AppBundle:AccommodationFee', 'f')
            ->set('f.status', $status)
            ->where('f.accommodation = :accommodation')
            ->setParameter('accommodation', $accommodation);

        $qb->getQuery()->execute();
    }


    /**
     * Activate all commission fees
     * @param $tip
     */
    public function activateCommisionsStatus($accommodation, $status) {
        $qb = $this->createQueryBuilder('f')
            ->update('AppBundle:AccommodationFee', 'f')
            ->set('f.status', $status)
            ->where('f.accommodation = :accommodation')
            ->setParameter('accommodation', $accommodation);

        $qb->getQuery()->execute();
    }

    /**
     * Get pending Fees
     * @return array
     */
    public function getPendingFees() {
        $qb = $this->createQueryBuilder('f')
            ->select('f, a, type')
            ->innerJoin('f.accommodation', 'a')
            ->innerJoin('f.type', 'type')
            ->where('f.status = :status')
            ->andWhere('f.validUntil IS NULL')
            ->andWhere('type.payment = :payment')
            ->setParameter('status', 1)
            ->setParameter('payment', 1);

        return $qb->getQuery()->getResult();
    }

    /**
     * Get pending Fees
     * @return array
     */
    public function getActiveFeeNum() {
        $qb = $this->createQueryBuilder('f')
            ->select('count(f)')
            ->innerJoin('f.type', 'type')
            ->andWhere('f.validUntil >= :now AND f.status = 1 AND type.payment = 1')
            ->orWhere('f.status = 1 AND type.payment = 2')
            ->setParameter('now', date('Y-m-d'));

        return $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * Get active fee for accommodation
     * @param $accommodation
     * @return array
     */
    public function getActiveFee($accommodation) {
        $qb = $this->createQueryBuilder('f')
            ->select('f, type')
            ->innerJoin('f.type', 'type')
            ->where('f.accommodation = :accommodation')
            ->andWhere('f.validUntil >= :now AND f.status = 1 AND type.payment = 1')
            ->setParameter('accommodation', $accommodation)
            ->setParameter('now', date('Y-m-d'));

        return (count($qb->getQuery()->getResult())) ? $qb->getQuery()->getSingleResult() : null;
    }

    /**
     * Get last fee (inactive/active -> for steps where are no active fees)
     * @param $accommodation
     * @return mixed|null
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getLastFee($accommodation) {
        $qb = $this->createQueryBuilder('f')
            ->select('f, type')
            ->innerJoin('f.type', 'type')
            ->where('f.accommodation = :accommodation')
            ->andWhere('type.payment = 1')
            ->setParameter('accommodation', $accommodation)
            ->orderBy('f.id', 'DESC');

        return (count($qb->getQuery()->getResult())) ? $qb->getQuery()->getSingleResult() : null;
    }

    /**
     * @return mixed
     */
    public function getCommisionNum() {
        $qb = $this->createQueryBuilder('f')
            ->select('count(f)')
            ->innerJoin('f.type', 'type')
            ->where('f.status = 1 AND type.payment = 0');

        return $qb->getQuery()->getSingleScalarResult();
    }

}
