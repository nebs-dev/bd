<?php

namespace AppBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * AccommodationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AccommodationRepository extends EntityRepository {

    /**
     * get all Accommodations
     * @return array
     */
    public function getAll() {
        $qb = $this->createQueryBuilder('a')
            ->select('a, u, ac, c, r, f')
            ->innerJoin('a.user', 'u')
            ->innerJoin('a.city', 'c')
            ->innerJoin('a.accommodationCategory', 'ac')
            ->leftJoin('a.reviews', 'r')
            ->leftJoin('a.fees', 'f');

        return $qb->getQuery()->getResult();
    }

    public function getAccommdationNum() {
        $qb = $this->createQueryBuilder('a')
            ->select('count(a)')
            ->leftJoin('a.fees', 'f')
            ->leftJoin('f.type', 'type')
            ->where('f.validUntil >= :now AND f.status = 1 AND type.payment = 1')
            ->orWhere('f.status = 1 AND type.payment = 2')
            ->setParameter('now', date('Y-m-d'));

        return $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * Get all Accommodations depending on status
     * @param $status
     * @return array
     */
    public function getAllStatus($status) {
        $qb = $this->createQueryBuilder('a')
            ->select('a, u, ac, user, c, r, f')
            ->innerJoin('a.accommodationCategory', 'ac')
            ->innerJoin('a.city', 'c')
            ->innerJoin('a.user', 'user')
            ->leftJoin('a.units', 'u')
            ->leftJoin('a.reviews', 'r')
            ->leftJoin('a.fees', 'f')
            ->where('(user.isActive = :status) AND (f.validUntil >= :now AND f.status = 1)')
            ->setParameter('status', $status)
            ->setParameter('now', date('Y-m-d'));

        return $qb->getQuery()->getResult();
    }

    public function getAccommodationsHome() {
        $qb = $this->createQueryBuilder('a')
            ->select('a, fees')
            ->innerJoin('a.fees', 'fees')
            ->innerJoin('fees.type', 'feeType')
            ->innerJoin('a.advertisingPackage', 'adv')
            ->innerJoin('adv.type', 'advType')
            ->where('adv.validUntil > :now AND adv.status = 1 AND advType.type = :home')
            ->andWhere('fees.status = 1 AND ((fees.validUntil >= :now AND feeType.payment=1) OR (feeType.payment=0))')
            ->setParameter('now', date('Y-m-d'))
            ->setParameter('home', 'home')
            ->groupBy('a.id');

        $result = $qb->getQuery()->getResult();
        $numResults = count($result);

        if($numResults >= 6)
            return $qb->getQuery()->getResult();

        $keys = array();
        foreach($result as $res) {
            array_push($keys, $res->getId());
        }

        $limit = 6 - $numResults;

        # Search for more accommodations
        $qb2 = $this->createQueryBuilder('a')
            ->select('a, fees')
            ->leftJoin('a.fees', 'fees')
            ->leftJoin('fees.type', 'feeType')
            ->where('fees.status = 1 AND ((fees.validUntil >= :now AND feeType.payment=1) OR (feeType.payment=0))')
            ->andWhere("a.id NOT IN (:keys)")
            ->setParameter('now', date('Y-m-d'))
            ->setParameter('keys', $keys)
            ->groupBy('a.id')
            ->setMaxResults($limit);

        foreach($qb2->getQuery()->getResult() as $acc) {
            array_push($result, $acc);
        }

        return $result;
    }

    /**
     * Lazy loading is faster than this?????
     * @param $accommodationId
     * @return mixed
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getSingle($accommodationId) {
        $qb = $this->createQueryBuilder('a')
            ->select('a, u, ac, user, c, r, activities, facilities, additionals, beaches, distance, payments, details, views, appliances')
            ->innerJoin('a.accommodationCategory', 'ac')
            ->innerJoin('a.city', 'c')
            ->innerJoin('a.user', 'user')
            ->leftJoin('a.units', 'u')
            ->leftJoin('a.reviews', 'r')
            ->leftJoin('a.activities', 'activities')
            ->leftJoin('a.facilities', 'facilities')
            ->leftJoin('a.additionals', 'additionals')
            ->leftJoin('a.beaches', 'beaches')
            ->leftJoin('a.distance', 'distance')
            ->leftJoin('a.payments', 'payments')
            ->leftJoin('u.details', 'details')
            ->leftJoin('u.views', 'views')
            ->leftJoin('u.appliances', 'appliances')
            ->where('a.id = :id')
            ->setParameter('id', $accommodationId);

        return $qb->getQuery()->getSingleResult();
    }

    /**
     * @param $userId
     * @return array
     */
    public function getAccommodationsUser($userId) {
        $qb = $this->createQueryBuilder('a')
            ->select('a, u, ac, c, r')
            ->innerJoin('a.accommodationCategory', 'ac')
            ->innerJoin('a.city', 'c')
            ->leftJoin('a.units', 'u')
            ->leftJoin('a.reviews', 'r')
            ->where('a.user = :userId')
            ->setParameter('userId', $userId);

        return $qb->getQuery()->getResult();
    }

    /**
     * Wishlist for app.user
     * @param $userId
     * @return array
     */
    public function getWishlist($userId) {
        $qb = $this->createQueryBuilder('a')
            ->select('a, c, ac, u, r')
            ->innerJoin('a.accommodationCategory', 'ac')
            ->innerJoin('a.wishlistUsers', 'u')
            ->innerJoin('a.city', 'c')
            ->leftJoin('a.reviews', 'r')
            ->where('u.id = :userId')
            ->setParameter('userId', $userId);

        return $qb->getQuery()->getResult();
    }


    public function getAvalaiblePriceExtra($accommodation, $priceExtraName) {
        $qb = $this->createQueryBuilder('a')
            ->select('count(a.id)')
            ->innerJoin('a.units', 'u')
            ->innerJoin('u.unitPriceExtra', 'upe')
            ->innerJoin('upe.priceExtra', 'pe')
            ->where('a = :accommodation')
            ->andWhere('pe.name = :priceExtraName')
            ->setParameter('accommodation', $accommodation)
            ->setParameter('priceExtraName', $priceExtraName);

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function getAvalaibleFacilities($accommodation, $facilityName) {
        $qb = $this->createQueryBuilder('a')
            ->select('count(a.id)')
            ->innerJoin('a.facilities', 'f')
            ->where('a = :accommodation')
            ->andWhere('f.name = :facilityName')
            ->setParameter('accommodation', $accommodation)
            ->setParameter('facilityName', $facilityName);

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function getAvalaibleBeaches($accommodation, $beachName) {
        $qb = $this->createQueryBuilder('a')
            ->select('count(a.id)')
            ->innerJoin('a.beaches', 'b')
            ->where('a = :accommodation')
            ->andWhere('b.name = :beachName')
            ->setParameter('accommodation', $accommodation)
            ->setParameter('beachName', $beachName);

        return $qb->getQuery()->getSingleScalarResult();
    }


    /**
     * Search Accommodations
     * @param $data
     * @return array
     */
    public function search($data, $locationType, $locationObj) {
//        $qb2 = $this->_em->createQueryBuilder();

        $qb = $this->createQueryBuilder('a')
            ->select('a, city, region, subregion, ac, unit')
            ->addSelect("CASE
                        WHEN advType.type = :locationType THEN 1
                        WHEN advType.type IS NULL THEN 3
                        ELSE 4 END AS HIDDEN ORD");

        if($locationType == 'city') {
            $qb->addSelect("CASE
                        WHEN city.en = :location THEN 1
                        WHEN region.en = :location THEN 2
                        ELSE 3 END AS HIDDEN CityORD");
        }

        $qb
            ->innerJoin('a.accommodationCategory', 'ac')
            ->innerJoin('a.city', 'city')
            ->leftJoin('city.subregion', 'subregion')
            ->innerJoin('city.region', 'region')
            ->innerJoin('city.region', 'cityRegion')
            ->innerJoin('region.country', 'country')
            ->leftJoin('a.fees', 'fees')
            ->leftJoin('fees.type', 'feeType')
//            ->leftJoin('a.reviews', 'reviews')
            ->leftJoin('a.units', 'unit')
            ->innerJoin('a.user', 'user')
//            ->leftJoin('unit.periods', 'period')
            ->leftJoin('a.advertisingPackage', 'adv')
            ->leftJoin('adv.type', 'advType')
            ->setParameter('locationType', $locationType)
        ;

        # If fromDate && toDate isset
        if(isset($data['fromDate']) && isset($data['toDate'])) {
            $qb->leftJoin('unit.bookings', 'booking');
        }
	    # If bedroomNumber isset
	    if(isset($data['bedroomNumber'])) {
		    $qb->leftJoin('unit.bedroom', 'bedroom');
	    }
	    # If bathroomNumber isset || washingMachine
	    if(isset($data['bathroomNumber']) || isset($data['washingMachine'])) {
		    $qb->leftJoin('unit.bathroom', 'bathroom');
	    }
        # If dishwasher isset
        if(isset($data['dishwasher'])) {
            $qb->leftJoin('unit.kitchen', 'kitchen');
        }
        # If any of ExtraPrice isset
        if(isset($data['airCondition']) || isset($data['animal_welcome']) || isset($data['parking']) ) {
            $qb
                ->leftJoin('unit.unitPriceExtra', 'unitPriceExtra')
                ->leftJoin('unitPriceExtra.priceExtra', 'priceExtra');
        }
        # If any of appliances isset
        if(isset($data['satTv']) || isset($data['heating']) ) {
            $qb->leftJoin('unit.appliances', 'appliances');
        }
        # If any of distances isset
//        if(isset($data['center']) || isset($data['beach']) || isset($data['sea']) || isset($data['restaurantDistance']) || isset($data['airport']) || isset($data['shoppingMall'])) {
//            $qb->leftJoin('a.distance', 'distance');
//        }

        $qb
            ->where('city.en = :location')
            ->orWhere('subregion.en = :location')
            ->orWhere('region.en = :location')
            ->orWhere('country.en = :location');

        if($locationType == 'city') {
            $qb->orWhere('region.en = :cityRegion');
            $qb->setParameter('cityRegion', $locationObj->getRegion()->getEn());
        }

        # Location is mandatory
        $qb->setParameter('location', $data['location']);


        # Categorization
        if(isset($data['categorization']) && count($data['categorization']) > 0) {
            $catNum = 0;
            foreach($data['categorization'] as $cat) {
                $qb
                    ->andWhere('unit.categorize = :cat')
                    ->setParameter('cat', $cat);

                $catNum++;
            }
        }


		# Booking date
        if(isset($data['fromDate']) && isset($data['toDate'])) {
            /**
             * TODO: Vidjeti da li se status uzima u obzir kod searcha
             * AND b.status = 1 => na kraj ovog bloka query-a
             *
             * Vidjeti da li fromDate smije biti isti kao završetak prošlog bookinga
             */
            $qb
                ->andWhere("NOT EXISTS (
                    SELECT b FROM AppBundle:Booking b
                    WHERE (((b.fromDate BETWEEN :from AND :to) OR (b.toDate BETWEEN :from AND :to))
                    OR ((:from BETWEEN b.fromDate AND b.toDate) OR (:to BETWEEN b.fromDate AND b.toDate)))
                )")
                ->setParameter('from', $data['fromDate'])
                ->setParameter('to', $data['toDate']);
        }
	    # Price
	    if(isset($data['priceMin']) && isset($data['priceMax'])) {
		    $qb
			    ->having('((unit.basicPrice) >= :priceMin) and (unit.basicPrice) <= :priceMax')
		        ->setParameter('priceMin', $data['priceMin'])
			    ->setParameter('priceMax', $data['priceMax']);
	    }
	    # Accommodation Category
	    if(isset($data['accommodationCategory'])) {
		    $qb
			    ->andWhere('ac.name = :category')
			    ->setParameter('category', $data['accommodationCategory']->getName());
	    }
	    # Capacity
	    if(isset($data['capacity'])) {
		    $qb
			    ->andWhere('unit.capacity >= :capacity')
			    ->setParameter('capacity', $data['capacity']);
		}
	    # Check In
//	    if(isset($data['checkIn'])) {
//		    $qb
//			    ->andWhere('a.checkIn <= :checkIn')
//			    ->setParameter('checkIn', $data['checkIn']);
//	    }
	    # Check Out
//	    if(isset($data['checkOut'])) {
//		    $qb
//			    ->andWhere('a.checkOut >= :checkOut')
//			    ->setParameter('checkOut', $data['checkOut']);
//	    }
	    # Bedroom number
	    if(isset($data['bedroomNumber'])) {
		    $qb
			    ->andWhere('bedroom.number = :bedroomNumber')
			    ->setParameter('bedroomNumber', $data['bedroomNumber']);
	    }
	    # Bathroom number
	    if(isset($data['bathroomNumber'])) {
		    $qb
			    ->andWhere('bathroom.number = :bathroomNumber')
			    ->setParameter('bathroomNumber', $data['bathroomNumber']);
	    }

        ### PRICE EXTRA ###

        # Air condition
        if(isset($data['airCondition']) && $data['airCondition']) {
            $qb->andWhere('EXISTS(
                    SELECT 1 FROM AppBundle:UnitPriceExtra AS upe
                    INNER JOIN upe.priceExtra AS pe
                    WHERE upe.unit = unit.id AND upe.availability = 1 AND pe.name = :airCondition
                )')
                ->setParameter('airCondition', 'airCondition');
        }
        # Animal welcome
        if(isset($data['animal_welcome']) && $data['animal_welcome']) {
            $qb->andWhere('EXISTS(
                    SELECT 1 FROM AppBundle:UnitPriceExtra AS upe2
                    INNER JOIN upe2.priceExtra AS pe2
                    WHERE upe2.unit = unit.id AND upe2.availability = 1 AND pe2.name = :pets
                )')
                ->setParameter('pets', 'pets');
        }
        # Parking
        if(isset($data['parking']) && $data['parking']) {
            $qb->andWhere('EXISTS(
                    SELECT 1 FROM AppBundle:UnitPriceExtra AS upe3
                    INNER JOIN upe3.priceExtra AS pe3
                    WHERE upe3.unit = unit.id AND upe3.availability = 1 AND pe3.name = :parking
                )')
                ->setParameter('parking', 'parking');
        }
        # Internet
        if(isset($data['internet']) && $data['internet']) {
            $qb->andWhere('a.wifi IS NOT NULL');
        }


        # satTv
        if(isset($data['satTv']) && $data['satTv']) {
            $qb->andWhere('appliances.satTv = 1');
        }
        # heating
        if(isset($data['heating']) && $data['heating']) {
            $qb->andWhere('appliances.heating = 1');
        }
        # washingMachine
        if(isset($data['washingMachine']) && $data['washingMachine']) {
            $qb->andWhere('bathroom.washingMachine = 1');
        }
        # dishwasher
        if(isset($data['dishwasher']) && $data['dishwasher']) {
            $qb->andWhere('kitchen.dishwasher = 1');
        }


        ### Facilities ###

        # Grill
        if(isset($data['grill']) && $data['grill']) {
            $qb->andWhere('EXISTS(
                    SELECT 1 FROM AppBundle:Accommodation AS a1
                    INNER JOIN a1.facilities AS f1
                    WHERE a MEMBER OF f1.accommodations
                    AND f1.name = :grill_terrace OR f1.name = :grill_garden
                )')
                ->setParameter('grill_terrace', 'grill_terrace')
                ->setParameter('grill_garden', 'grill_garden');
        }
        # Pool
        if(isset($data['pool']) && $data['pool']) {
            $qb->andWhere('EXISTS(
                    SELECT 1 FROM AppBundle:Accommodation AS a2
                    INNER JOIN a2.facilities AS f2
                    WHERE a MEMBER OF f2.accommodations
                    AND f2.name = :pool
                )')
                ->setParameter('pool', 'pool');
        }
        # Restaurant
        if(isset($data['restaurant']) && $data['restaurant']) {
            $qb->andWhere('EXISTS(
                    SELECT 1 FROM AppBundle:Accommodation AS a3
                    INNER JOIN a3.facilities AS f3
                    WHERE a MEMBER OF f3.accommodations
                    AND f3.name = :restaurant
                )')
                ->setParameter('restaurant', 'restaurant');
        }

        ### Distances ###

//        # Center
//        if(isset($data['center'])) {
//            $qb->andWhere('distance.center <= :center')
//                ->setParameter('center', $data['center']);
//        }
//        # Beach
//        if(isset($data['beach'])) {
//            $qb->andWhere('distance.beach <= :beach')
//                ->setParameter('beach', $data['beach']);
//        }
//        # Sea
//        if(isset($data['sea'])) {
//            $qb->andWhere('distance.sea <= :sea')
//                ->setParameter('sea', $data['sea']);
//        }
//        # Restaurant
//        if(isset($data['restaurantDistance'])) {
//            $qb->andWhere('distance.restaurant <= :restaurantDistance')
//                ->setParameter('restaurantDistance', $data['restaurantDistance']);
//        }
//        # Airport
//        if(isset($data['airport'])) {
//            $qb->andWhere('distance.airport <= :airport')
//                ->setParameter('airport', $data['airport']);
//        }
//        # shoppingMall
//        if(isset($data['shoppingMall'])) {
//            $qb->andWhere('distance.shoppingMall <= :shoppingMall')
//                ->setParameter('shoppingMall', $data['shoppingMall']);
//        }


        $qb->andWhere('user.isActive = 1');

        # Check if accommodation is active
//        $qb->andWhere('fees.status = 1 AND ((fees.validUntil >= :now AND feeType.payment=1) OR (feeType.payment=0))')
//            ->setParameter('now', date('Y-m-d'));

        # PAGINATION
        $maxResults = 22;
        switch($data['page']) {
            case 'first':
                $qb ->setFirstResult(0)
                    ->setMaxResults($maxResults)
                    ->orderBy('ORD', 'ASC')
               ;
                break;
            case 'last':
                $qb->setFirstResult(0);
                break;
            case '1':
                $qb
                    ->setFirstResult(0)
                    ->setMaxResults($maxResults)
                    ->orderBy('ORD', 'ASC');
                break;
            default:
                $firstResult = ($data['page'] * $maxResults) - ($maxResults);
                $qb->setFirstResult($firstResult)
                    ->setMaxResults($maxResults)
//                    ->orderBy('ORD', 'ASC')
                ;
                break;
        }

        if($locationType == 'city') {
            $qb->addOrderBy('CityORD', 'ASC');
        }

        $results = new Paginator($qb, $fetchJoin = true);

        return $results;

//        return $qb->getQuery()->getResult();
    }

}
