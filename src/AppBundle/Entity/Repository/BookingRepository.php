<?php

namespace AppBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * BookingRepository
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BookingRepository extends EntityRepository {

    /**
     * Get all bookings
     * @param int $status
     * @return array
     */
    public function getAll($status = 1) {
        $qb = $this->createQueryBuilder('b')
            ->select('b, unit, a, host, guest')
            ->innerJoin('b.unit', 'unit')
            ->innerJoin('unit.accommodation', 'a')
            ->innerJoin('a.user', 'host')
            ->innerJoin('b.user', 'guest')
            ->where('b.status = :status')
            ->setParameter('status', $status);

        return $qb->getQuery()->getResult();
    }

    /**
     * get bookings for unit
     * @param $unit
     * @return array
     */
    public function getBookingUnit($unit) {
        $qb = $this->createQueryBuilder('b')
            ->select('b, u')
            ->innerJoin('b.unit', 'u')
            ->where('b.unit = :unit')
            ->setParameter('unit', $unit);

        return $qb->getQuery()->getResult();
    }

    /**
     * Get hosts bookings
     * @param $host
     * @param int $status
     * @return array
     */
    public function getBookingsHost($host, $status = 1, $new = null, $now = null) {
        $qb = $this->createQueryBuilder('b')
            ->select('b, unit, a , user')
            ->innerJoin('b.unit', 'unit')
            ->innerJoin('unit.accommodation', 'a')
            ->innerJoin('a.user', 'user')
            ->where('user = :host')
            ->andWhere('b.status = :status')
            ->setParameter('host', $host)
            ->setParameter('status', $status)
            ->orderBy('b.createdAt', 'DESC');

        if(!is_null($new)) {
            $qb
                ->andWhere('b.new = :new')
                ->setParameter('new', $new);
        }
        if(!is_null($now)) {
            $qb
                ->andWhere('b.toDate > :now')
                ->setParameter('now', $now);
        }

        return $qb->getQuery()->getResult();
    }

    /**
     * Get guests bookings
     * @param $guest
     * @param int $status
     * @return array
     */
    public function getBookingsGuest($guest, $status = 1, $now = null) {
        $qb = $this->createQueryBuilder('b')
            ->select('b, unit, a, user')
            ->innerJoin('b.unit', 'unit')
            ->innerJoin('unit.accommodation', 'a')
            ->innerJoin('b.user', 'user')
            ->where('b.user = :guest')
            ->andWhere('b.status = :status')
            ->setParameter('guest', $guest)
            ->setParameter('status', $status)
            ->orderBy('b.createdAt', 'DESC');

        if(!is_null($now)) {
            $qb
                ->andWhere('b.toDate > :now')
                ->setParameter('now', $now);
        }

        return $qb->getQuery()->getResult();
    }


    public function getOldBookingsGuest($guest, $now) {
        $qb = $this->createQueryBuilder('b')
            ->select('b, unit, a, user')
            ->innerJoin('b.unit', 'unit')
            ->innerJoin('unit.accommodation', 'a')
            ->innerJoin('b.user', 'user')
            ->where('b.user = :guest')
            ->andWhere('b.toDate < :now')
            ->setParameter('guest', $guest)
            ->setParameter('now', $now)
            ->orderBy('b.createdAt', 'DESC');

        return $qb->getQuery()->getResult();
    }

    public function getOldBookingsHost($host, $now) {
        $qb = $this->createQueryBuilder('b')
            ->select('b, unit, a , user')
            ->innerJoin('b.unit', 'unit')
            ->innerJoin('unit.accommodation', 'a')
            ->innerJoin('a.user', 'user')
            ->where('user = :host')
            ->andWhere('b.toDate < :now')
            ->setParameter('host', $host)
            ->setParameter('now', $now)
            ->orderBy('b.createdAt', 'DESC');

        return $qb->getQuery()->getResult();
    }

    /**
     * Get all bookings between host && guest
     * @param $host
     * @param $guest
     * @return array
     */
    public function getHostGuestBookings($host, $guest) {
        $qb = $this->createQueryBuilder('b')
            ->select('b')
            ->innerJoin('b.unit', 'unit')
            ->innerJoin('unit.accommodation', 'a')
            ->innerJoin('a.user', 'host')
            ->innerJoin('b.user', 'guest')
            ->where('guest = :guest')
            ->andWhere('host = :host')
            ->setParameter('guest', $guest)
            ->setParameter('host', $host);

        return $qb->getQuery()->getResult();
    }


    /**
     * Set all pending bookings as NOT new
     * @param $userFrom
     * @param $userTo
     * @return mixed
     */
    public function updatePendingBookingNotNew($booking) {
        try {
            $this->createQueryBuilder('b')
                ->update('AppBundle:Booking b')
                ->set('b.new', 0)
                ->where('b = :booking')
                ->setParameter('booking', $booking)
                ->getQuery()
                ->execute();

            return true;

        } catch(\Exception $e) {
            return false;
        }
    }


    /**
     * Num of booked in this period
     * @param $booking
     * @return mixed
     */
    public function getBookedNum($booking) {
        $qb = $this->createQueryBuilder('b')
            ->select('count(b)')
            ->where('(:fromDate BETWEEN b.fromDate AND b.toDate) OR (:toDate BETWEEN b.fromDate AND b.toDate)')
            ->andWhere('b.unit = :unit')
            ->setParameter('fromDate', $booking->getFromDate())
            ->setParameter('toDate', $booking->getToDate())
            ->setParameter('unit', $booking->getUnit())
        ;

        return $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * Get all new commision bookings (based on booking_commision && fee_type)
     * @oayment = 0 => commision
     * @oayment = 1 => fee
     * @return array
     */
    public function getCommisionNotPayed() {
        $qb = $this->createQueryBuilder('b')
            ->select('b, a, unit, user, fees, feeType')
            ->innerJoin('b.unit', 'unit')
            ->innerJoin('unit.accommodation', 'a')
            ->innerJoin('a.fees', 'fees')
            ->innerJoin('a.user', 'user')
            ->innerJoin('fees.type', 'feeType')
            ->where('feeType.payment = :payment')
            ->andWhere('fees.status = :feeStatus')
            ->andWhere('b.commision IS NULL OR b.commision = :commisionSent')
            ->andWhere('b.status = :bookingStatus')
            ->setParameter('payment', 0)
            ->setParameter('feeStatus', 1)
            ->setParameter('commisionSent', 1)
            ->setParameter('bookingStatus', 1);

        return $qb->getQuery()->getResult();
    }

    /**
     * Get all commisions for Accommodation
     * @param $accommodation
     * @return array
     */
    public function getCommisionsAccommodation($accommodation) {
        $qb = $this->createQueryBuilder('b')
            ->select('b, a, unit, host, fees, feeType')
            ->innerJoin('b.unit', 'unit')
            ->innerJoin('unit.accommodation', 'a')
            ->innerJoin('a.fees', 'fees')
            ->innerJoin('a.user', 'host')
            ->innerJoin('fees.type', 'feeType')
            ->where('feeType.payment = :payment')
            ->andWhere('fees.status = :feeStatus')
            ->andWhere('b.status = :bookingStatus')
            ->andWhere('a = :accommodation')
            ->setParameter('payment', 0)
            ->setParameter('feeStatus', 1)
            ->setParameter('bookingStatus', 1)
            ->setParameter('accommodation', $accommodation);

        return $qb->getQuery()->getResult();
    }


    /**
     * Get all new commission fees for accommodation
     * @param $tip
     */
    public function getNewCommisionsAccommodation($accommodation) {
        $qb = $this->createQueryBuilder('b')
            ->select('b, a, unit, host, fees, feeType')
            ->innerJoin('b.unit', 'unit')
            ->innerJoin('unit.accommodation', 'a')
            ->innerJoin('a.fees', 'fees')
            ->innerJoin('a.user', 'host')
            ->innerJoin('fees.type', 'feeType')
            ->where('feeType.payment = :payment')
            ->andWhere('a = :accommodation')
            ->andWhere('fees.status = :feeStatus')
            ->andWhere('b.status = :bookingStatus')
            ->andWhere('b.commision IS NULL')
            ->setParameter('payment', 0)
            ->setParameter('feeStatus', 1)
            ->setParameter('bookingStatus', 1)
            ->setParameter('accommodation', $accommodation);

        return $qb->getQuery()->getResult();
    }


    /**
     * Get active bookings - by booking.toDate
     * @param $unit
     * @return array
     */
    public function getActiveBookings($unit) {
        $date = new \DateTime('now');

        $qb = $this->createQueryBuilder('b')
            ->select('b, unit')
            ->innerJoin('b.unit', 'unit')
            ->andWhere('unit = :unit')
            ->andWhere('b.status = :bookingStatus')
            ->andWhere('b.toDate >= :now')
            ->setParameter('bookingStatus', 1)
            ->setParameter('unit', $unit)
            ->setParameter('now', $date->format('Y-m-d'))
        ;

        return $qb->getQuery()->getResult();
    }

    /**
     * Check if user ever booked this accommodation
     * @param $accommodation
     * @param $user
     * @param $now
     * @return mixed
     */
    public function getUserBooked($accommodation, $user, $now) {
        $qb = $this->createQueryBuilder('b')
            ->select('count(b.id)')
            ->innerJoin('b.unit', 'u')
            ->where('u.accommodation = :accommodation')
            ->andWhere('b.user = :user')
            ->andWhere('b.toDate < :now')
            ->setParameter('accommodation', $accommodation)
            ->setParameter('now', $now)
            ->setParameter('user', $user);

        return $qb->getQuery()->getSingleScalarResult();
    }

}
